apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: rback
  namespace: kubebb-system
spec:
  params:
  - name: url
    type: string
  - name: component
    type: string
  - name: version
    type: string
  - name: repository
  results:
  - name: RBACCM
    type: string
  steps:
    - name: rback
      image: kubebb/rating:v0.1.3
      script: |
        #!/usr/bin/env sh
        # Download and untar chart package
        helm pull --untar $(params.url)

        cat <<EOF | jq --argjson json "$(helm template $(params.component)|yq -o=json|jq --slurp)" '.items |= $json' | rback > r.dot
        {"kind": "List","apiVersion": "v1","metadata": {},"items": []}
        EOF
        
        APISERVER=https://kubernetes.default.svc
        # Path to ServiceAccount token
        SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
        # Read this Pod's namespace
        NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
        # Read the ServiceAccount bearer token
        TOKEN=$(cat ${SERVICEACCOUNT}/token)
        # Reference the internal certificate authority (CA)
        CACERT=${SERVICEACCOUNT}/ca.crt

        NAME=$(params.repository)"."$(params.component)"."$(params.version)

        cat <<EOF |jq --arg dot "$(cat r.dot |base64)" '.binaryData.r = $dot' | jq --arg name "$NAME" '.metadata.name = $name' | jq --arg namespace "$NAMESPACE" '.metadata.namespace = $namespace' | curl --cacert ${CACERT} -H "Authorization: Bearer ${TOKEN}" -H"Content-Type: application/json" -d @- -XPOST ${APISERVER}/api/v1/namespaces/${NAMESPACE}/configmaps
        {"kind": "ConfigMap","apiVersion": "v1","metadata": {"name": "qq","namespace": "default"},"binaryData": {"r": ""}}
        EOF
        echo ${NAME} | tee $(results.RBACCM.path)
